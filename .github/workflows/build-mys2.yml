name: Build Modshot with MSYS2
on: push
jobs:
  build-windows:
    name: Build ModShot for Windows
    runs-on: windows-2019
    env:
      CONAN_USER_HOME: C:\.conan
      CONAN_USER_HOME_SHORT: C:\.conan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install conan and xxd
        run: choco install -y vim; pip install conan
      - name: Set path to include xxd
        shell: bash
        run: 'echo "C:\tools\vim\vim82" >> $GITHUB_PATH'
      - name: Add Windows SDK to path
        shell: bash
        run: 'echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64" >> $GITHUB_PATH'
      - name: Configure conan
        run: |
          conan remote add eliza https://rkevin.jfrog.io/artifactory/api/conan/eliza;
          conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan;
          conan remote add astrabit https://rkevin.jfrog.io/artifactory/api/conan/astrabit;
          conan config set general.revisions_enabled=1;
          conan config get;
          setx CONAN_USE_ALWAYS_SHORT_PATHS 1;
          setx CONAN_BASH_PATH C:\msys64\usr\bin\bash.exe;
          mkdir ${{ runner.temp }}\build
      - name: Configure profile
        run: |
          conan profile new msys2 --detect;
          conan profile update settings.compiler=gcc msys2;
          conan profile update settings.compiler.version=8.1 msys2;
          conan profile update settings.compiler.libcxx=libstdc++11 msys2;
          conan profile update settings.compiler.exception=seh msys2;
          conan profile update settings.compiler.threads=posix msys2;
      - name: Setup global.conf
        run: |
          echo tools.microsoft.bash:subsystem=msys2 >> C:\.conan\.conan\global.conf;
          echo tools.microsoft.bash:path=C:\msys64\usr\bin\bash.exe >> C:\.conan\.conan\global.conf;
      - name: Install msys2 and mingw
        run: |
          conan install mingw_installer/1.0@conan/stable --profile=msys2;
          conan install msys2/cci.latest@ --profile=msys2
      - name: Install gems
        run: |
          gem install pathname
      - name: Append to msys2 profile
        run: |
          echo [build_requires] >> C:\.conan\.conan\profiles\msys2;
          echo mingw_installer/1.0@conan/stable >> C:\.conan\.conan\profiles\msys2;
          echo msys2/cci.latest@ >> C:\.conan\.conan\profiles\msys2
      - name: Setup path in msys2
        run: |
          echo 'export PATH="$PATH:C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64"' >> C:\msys64\home\runneradmin\.bashrc;
          echo 'export PATH="$PATH:C:\Program Files (x86)\Windows Kits\10\bin\10.0.22000.0\x64"' >> C:\msys64\home\packer\.bashrc;
          type C:\msys64\home\packer\.bashrc
      - name: Cache conan dependenciesa
        uses: actions/cache@v2
        with:
          path: C:\.conan
          key: ${{ runner.os }}-cached-conan-modules-${{ hashFiles('conanfile.py') }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
      - name: where check
        run: |
          # show where
          Write-Host
          $where = 'gcc.exe', 'ragel.exe', 'make.exe', 'bison.exe', 'libcrypto-1_1-x64.dll', 'libssl-1_1-x64.dll'
          foreach ($e in $where) {
            $rslt = where.exe $e 2>&1 | Out-String
            if ($rslt.contains($e)) { Write-Host $rslt }
            else { Write-Host "`nCan't find $e" }
          }
      - name: Build dependencies using conan
        run: conan install ${{ github.workspace }} --build=missing -o msys2=True --profile=msys2
        working-directory: ${{ runner.temp }}\build
      - name: Build ModShot
        run: conan build ${{ github.workspace }}
        working-directory: ${{ runner.temp }}\build
      - name: Create dist folder
        run: |
          mkdir ${{ runner.temp }}\built_artifact;
          move ${{ runner.temp }}\build\bin\lib ${{ runner.temp }}\built_artifact\lib;
          move ${{ runner.temp }}\build\bin\* ${{ runner.temp }}\built_artifact\lib;
          move ${{ runner.temp }}\built_artifact\lib\oneshot-shim.exe ${{ runner.temp }}\built_artifact\oneshot.exe
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: modshot_build_windows_${{ github.sha }}
          path: ${{ runner.temp }}\built_artifact
  build-windows-steam:
    name: Build ModShot for Windows (Steam support)
    runs-on: windows-2019
    env:
      CONAN_USER_HOME: C:\.conan
      CONAN_USER_HOME_SHORT: C:\.conan
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install conan and xxd
        run: choco install -y vim; pip install conan
      - name: Set path to include xxd
        run: '[Environment]::SetEnvironmentVariable("Path", $env:Path + ";C:\tools\vim\vim82", "Machine")'
      - name: Configure conan
        run: |
          conan remote add eliza https://rkevin.jfrog.io/artifactory/api/conan/eliza;
          conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan;
          conan remote add astrabit https://rkevin.jfrog.io/artifactory/api/conan/astrabit;
          conan config set general.revisions_enabled=1;
          setx CONAN_USE_ALWAYS_SHORT_PATHS 1;
          mkdir ${{ runner.temp }}\build
      - name: Configure profile
        run: |
          conan profile new default --detect;
          conan profile update settings.compiler=gcc default;
          conan profile update settings.compiler.version=8.1 default;
          conan profile update settings.compiler.libcxx=libstdc++11 default  
      - name: Cache conan dependencies
        uses: actions/cache@v2
        with:
          path: C:\.conan
          key: ${{ runner.os }}-cached-conan-modules-${{ hashFiles('conanfile.py') }}-steam
      - name: Build dependencies using conan
        run: conan install ${{ github.workspace }} --build=missing -o platform=steam -o msys2=True
        working-directory: ${{ runner.temp }}\build
      - name: Build ModShot
        run: conan build ${{ github.workspace }}
        working-directory: ${{ runner.temp }}\build
      - name: Create dist folder
        run: |
          mkdir ${{ runner.temp }}\built_artifact;
          move ${{ runner.temp }}\build\bin\lib ${{ runner.temp }}\built_artifact\lib;
          move ${{ runner.temp }}\build\bin\* ${{ runner.temp }}\built_artifact\lib;
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: modshot_build_steam_windows_${{ github.sha }}
          path: ${{ runner.temp }}\built_artifact
